<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hopscotch POJ - 3050]]></title>
    <url>%2F2018%2F03%2F14%2FHopscotch-POJ-3050%2F</url>
    <content type="text"><![CDATA[由于数据量很水 就用bfs简单搜索和set存就好了 今晚莫名其妙的失眠了Orz 可能是在想学姐吧 学姐可真好啊 刷题 1234567891011121314151617181920212223242526272829#include &lt;iostream&gt;#include&lt;set&gt;using namespace std;int map[6][6];set&lt;int&gt; S;int step[][2]=&#123;&#123;-1,0&#125;,&#123;1,0&#125;,&#123;0,-1&#125;,&#123;0,1&#125;&#125;;void dfs(int x,int y,int k,int sum)&#123; if(6==k)&#123; S.insert(sum); return ; &#125; for(int i=0;i&lt;4;i++)&#123; int nx=x+step[i][0],ny=y+step[i][1]; if(nx&gt;=0&amp;&amp;nx&lt;5&amp;&amp;ny&gt;=0&amp;&amp;ny&lt;5) dfs(nx,ny,k+1,sum*10+map[nx][ny]); &#125;&#125;int main() &#123; //freopen("test","r",stdin); for(int i=0;i&lt;5;i++) for(int j=0;j&lt;5;j++) cin&gt;&gt;map[i][j]; for(int i=0;i&lt;5;i++) for(int j=0;j&lt;5;j++) dfs(i,j,1,map[i][j]); cout&lt;&lt;S.size()&lt;&lt;endl; return 0;&#125;]]></content>
      <categories>
        <category>挑战程序设计竞赛</category>
      </categories>
      <tags>
        <tag>bfs简单搜索 以及set的运用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Backward Digit Sums POJ - 3187]]></title>
    <url>%2F2018%2F03%2F13%2FBackward-Digit-Sums-POJ-3187%2F</url>
    <content type="text"><![CDATA[首先发现各个项的系数是二项式公式展开式 （其实就是杨辉三角Orz 初中学的都忘了 然后暴力枚举就好了 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int digit[11];int N,sum;int comb(int k,int n)&#123; if(k==0||k==n) return 1; else &#123; int num=1; int deno=1; for(int i=2;i&lt;=k;i++)&#123; num*=i; &#125; for(int i=n;i&gt;n-k;i--)&#123; deno*=i; &#125; return deno/num; &#125;&#125;int main() &#123; while(cin&gt;&gt;N&gt;&gt;sum)&#123; for(int i=0;i&lt;N;i++) digit[i]=i+1; bool flag=true; while(flag)&#123; int ans=0; for(int i=0;i&lt;N;i++) ans+=comb(i,N-1)*digit[i]; if(ans==sum)&#123; for(int i=0;i&lt;N;i++) &#123; if(i!=N-1) cout &lt;&lt; digit[i] &lt;&lt; ' '; else cout&lt;&lt;digit[i]&lt;&lt;endl; &#125; flag= false; &#125; else next_permutation(digit,digit+N); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>挑战程序设计竞赛</category>
      </categories>
      <tags>
        <tag>暴力穷举</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Smallest Difference POJ - 2718]]></title>
    <url>%2F2018%2F03%2F13%2FSmallest-Difference-POJ-2718%2F</url>
    <content type="text"><![CDATA[用next_permutation生成全排列 然后进行暴力求解 本来是想用贪心做的 但是贪心实在是太麻烦了 情况要考虑太多 然后以后千万别用x-y类似的表达式 被自己坑了一上午orz 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;int num[11];bool used[11];int dig;char ch;int idx;int x1=0,x2=0;int ans;int main() &#123; int T; cin&gt;&gt;T; while(T--)&#123; idx=0; ans=1000000; memset(used, false, sizeof(used)); while(scanf("%d%c",&amp;dig,&amp;ch)==2)&#123; num[idx]=dig; idx++; if(ch=='\n') break; &#125; int len=idx/2; do &#123; if(idx==2)&#123; ans=num[1]-num[0]; break; &#125; if(num[0]==0||num[len]==0) continue; x1=0; x2=0; for(int i=0;i&lt;len;i++)&#123; x1=10*x1+num[i]; &#125; for(int i=len;i&lt;idx;i++)&#123; x2=10*x2+num[i]; &#125; if(abs(x1-x2)&lt;ans) ans=abs(x1-x2); &#125;while(next_permutation(num,num+idx)); cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>挑战程序设计竞赛</category>
      </categories>
      <tags>
        <tag>暴力枚举</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cheese Aizu - 0558]]></title>
    <url>%2F2018%2F03%2F12%2FpostCheese-Aizu-0558%2F</url>
    <content type="text"><![CDATA[卡了好久 自己的思路有问题 不过这题也让自己对dfs理解深入了一些 dfs只能一个点对一个点用 对于多点问题 多次调用dfs才可以 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;iostream&gt;#include&lt;queue&gt;using namespace std;const int maxn=1005;const int INF=10000;char maze[maxn][maxn];int N,M;int num;typedef pair&lt;int,int&gt; P;int step[][2]=&#123;&#123;-1,0&#125;,&#123;1,0&#125;,&#123;0,-1&#125;,&#123;0,1&#125;&#125;;int d[maxn][maxn];int fac[10][2];int bfs(int sx,int sy,int ex,int ey)&#123; queue&lt;P&gt; q; P p; int nx,ny; for(int i=0;i&lt;N;i++) for(int j=0;j&lt;M;j++) d[i][j]=INF; d[sx][sy]=0; q.push(P(sx,sy)); //maze[sx][sy]='.'; while(q.size())&#123; p=q.front(); q.pop(); for(int i=0;i&lt;4;i++)&#123; nx=p.first+step[i][0]; ny=p.second+step[i][1]; if(nx&gt;=0&amp;&amp;nx&lt;N&amp;&amp;ny&gt;=0&amp;&amp;ny&lt;M&amp;&amp;maze[nx][ny]!='X'&amp;&amp;d[nx][ny]==INF)&#123; q.push(P(nx,ny)); d[nx][ny]=d[p.first][p.second]+1; if(nx==ex&amp;&amp;ny==ey) return d[ex][ey]; &#125; &#125; &#125; &#125;int main()&#123; //freopen("test","r",stdin); while(cin&gt;&gt;N&gt;&gt;M&gt;&gt;num)&#123; int step=0; for(int i=0;i&lt;N;i++) &#123; for (int j = 0; j &lt; M; j++) &#123; cin &gt;&gt; maze[i][j]; if (maze[i][j] == 'S') &#123; fac[0][0]=i; fac[0][1]=j; &#125; if (isdigit(maze[i][j])) &#123; int index=maze[i][j]-'0'; fac[index][0]=i; fac[index][1]=j; &#125; &#125; &#125; for(int i=0;i&lt;num;i++)&#123; step+=bfs(fac[i][0],fac[i][1],fac[i+1][0],fac[i+1][1]); &#125; cout&lt;&lt;step&lt;&lt;endl; &#125; return 0; &#125;]]></content>
      <categories>
        <category>挑战程序设计竞赛第二章</category>
      </categories>
      <tags>
        <tag>dfs搜索</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ball Aizu - 0033]]></title>
    <url>%2F2018%2F03%2F10%2FBall-Aizu-0033%2F</url>
    <content type="text"><![CDATA[dfs搜索 一种是放进去 一种是放到另一边 没什么难度 当两边都符合时分两种情况 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;iostream&gt;#include&lt;queue&gt;using namespace std;int a[11];int b[11],c[11];bool flag;queue&lt;int&gt; q1,q2;void dfs(int i)&#123; if(i==0) &#123; q1.push(a[i]); q2.push(-1); dfs(i+1); &#125; if(i==10) &#123; flag = true; return ; &#125; else &#123; for (int k = 0; k &lt; 2; k++) &#123; if (k == 0) &#123; if (q1.back()&lt;a[i]) q1.push(a[i]); else &#123; if(q2.back()&gt;a[i]) return ; else q2.push(a[i]); &#125; dfs(i+1); &#125; if(k==1)&#123; if(q2.back()&lt;a[i]) q2.push(a[i]); else&#123; if(q1.back()&gt;a[i]) return ; else q1.push(a[i]); &#125; dfs(i+1); &#125; &#125; &#125;&#125;int main() &#123; int n; freopen("test","r",stdin); cin&gt;&gt;n; while(n--)&#123; flag=false; for(int i=0;i&lt;10;i++) cin&gt;&gt;a[i]; dfs(0); if(flag) cout&lt;&lt;"YES"&lt;&lt;endl; else cout&lt;&lt;"NO"&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>挑战程序设计竞赛第二章</category>
      </categories>
      <tags>
        <tag>dfs 水</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Property Distribution Aizu - 0118]]></title>
    <url>%2F2018%2F03%2F10%2FProperty-Distribution-Aizu-0118%2F</url>
    <content type="text"><![CDATA[最基础的dfs 剪枝都不需要的 校队选拔被学弟虐了Orz 谁知道 题目那么水。。 还是自己水平菜 大二了要更加加油呢 一开始area忘记初始化了wa了两发 ORZ 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;iostream&gt;using namespace std;int area;const int maxn=105;char maze[maxn][maxn];const int step[][2]=&#123;&#123;-1,0&#125;,&#123;1,0&#125;,&#123;0,-1&#125;,&#123;0,1&#125;&#125;;int N,M;void dfs(int x,int y,char ch)&#123; maze[x][y]='$'; for(int i=0;i&lt;4;i++)&#123; int nx=x+step[i][0],ny=y+step[i][1]; if(nx&gt;=0&amp;&amp;ny&gt;=0&amp;&amp;nx&lt;N&amp;&amp;ny&lt;M&amp;&amp;maze[nx][ny]==ch)&#123; dfs(nx,ny,ch); &#125; &#125; return;&#125;int main() &#123; // freopen("test","r",stdin); while(cin&gt;&gt;N&gt;&gt;M&amp;&amp;N+M)&#123; area=0; for(int i=0;i&lt;N;i++) for(int j=0;j&lt;M;j++) cin&gt;&gt;maze[i][j]; for(int i=0;i&lt;N;i++)&#123; for(int j=0;j&lt;M;j++)&#123; if(maze[i][j]!='$')&#123; char ch=maze[i][j]; dfs(i,j,ch); area++; &#125; &#125; &#125; cout&lt;&lt;area&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>挑战程序设计竞赛第二章</category>
      </categories>
      <tags>
        <tag>dfs 水</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[postBroken Keyboard (a.k.a. Beiju Text) UVA - 11988]]></title>
    <url>%2F2018%2F03%2F06%2FpostBroken-Keyboard-a-k-a-Beiju-Text-UVA-11988%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;string&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=100000+5;int last ,cur;int main() &#123; char s[maxn]; freopen("test","r",stdin); while(scanf("%s",s+1)==1)&#123; int next[maxn]; //memset(next,0,sizeof(next)); int n=strlen(s+1); last=cur=0; next[0]=0; for(int i=1;i&lt;=n;i++)&#123; if(s[i]=='[') cur=0; else if(s[i]==']') cur=last; else&#123; next[i]=next[cur]; //添加结束位 next[cur]=i; //下一位 if(cur==last) last=i; // 更新last位置 cur=i; &#125; &#125; for(int i=next[0];i!=0;i=next[i]) cout&lt;&lt;s[i]; cout&lt;&lt;endl; &#125; return 0;&#125; 代码倒是很简单 但是数组链表卡了好久 没看懂 最后靠手算2333 简单来说就是s要留一个预留位置 然后以0位结束 next指的是下一个元素的位置]]></content>
      <categories>
        <category>紫书第六章例题</category>
      </categories>
      <tags>
        <tag>链表的简单使用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Throwing cards away I UVA - 10935]]></title>
    <url>%2F2018%2F03%2F04%2FThrowing-cards-away-I-UVA-10935%2F</url>
    <content type="text"><![CDATA[题目就是最基本的队列基本应用 先进先出 被格式卡了一会 主要原因就是1的时候没空格emmmmm绝了 1234567891011121314151617181920212223242526272829303132#include&lt;iostream&gt;#include&lt;queue&gt;using namespace std;int main()&#123; int n;// freopen("in","r",stdin); while(cin&gt;&gt;n&amp;&amp;n)&#123; queue&lt;int&gt; q; bool flag=true; for(int i=1;i&lt;=n;i++) q.push(i); cout&lt;&lt;"Discarded cards:"; while(q.size()!=1)&#123; if(flag)&#123; cout&lt;&lt;" "&lt;&lt;q.front(); q.pop(); if(q.size()!=1)&#123; cout&lt;&lt;","; &#125; flag=!flag; &#125; else&#123; q.push(q.front()); q.pop(); flag=!flag; &#125; &#125; cout&lt;&lt;endl; cout&lt;&lt;"Remaining card: "&lt;&lt;q.front()&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>紫书第五章习题</category>
      </categories>
      <tags>
        <tag>水题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ducci Sequence UVA - 1594]]></title>
    <url>%2F2018%2F03%2F04%2FDucci-Sequence-UVA-1594%2F</url>
    <content type="text"><![CDATA[按照题目来就好了 到1000次时还不全为零那就是循环数列 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define MAXN 20bool compare(int *a,int *b,int n)&#123; for(int i=0;i&lt;n;i++)&#123; if(a[i]==b[i]) continue; else return false; &#125; return true;&#125;int main() &#123; int n; int T; freopen("test","r",stdin); cin&gt;&gt;T; while(T--) &#123; cin &gt;&gt; n; int exp[MAXN]; int cha[MAXN]; int zero[MAXN]; for (int i = 0; i &lt; n; i++) cin &gt;&gt; exp[i]; for (int i = 0; i &lt; n; i++) cha[i] = exp[i]; for (int i = 0; i &lt; n; i++) zero[i] = 0; int i; for (i = 0; i &lt; 1000; i++) &#123; int x = cha[0]; for (int j = 0; j &lt; n - 3; j++) &#123; cha[j] = abs(cha[j] - cha[(j + 1) % n]); &#125; cha[n - 1] = abs(cha[n - 1] - x); if (compare(cha, zero, n)) &#123; cout &lt;&lt; "ZERO" &lt;&lt; endl; i = 1005; &#125; &#125; if (i != 1006) cout &lt;&lt; "LOOP" &lt;&lt; endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>紫书第五章习题</category>
      </categories>
      <tags>
        <tag>水题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F03%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
